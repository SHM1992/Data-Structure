// DataStructure.cpp : 实现数据结构中的Dijkstra算法
//
#include "stdafx.h"
#include <cstdlib>
#include <iostream>
#define N 7
using namespace std;

void Dijkstra(int w[N][N])
{
	if(N>1)
	{
		//初始化
		int i,count = N-1;
		bool flag[N];//用以标识顶点是否已遍历
		flag[0] = true;
		for(i=1;i<N;i++)flag[i] = false;
		int dist[N];//用以标识顶点1到各点的距离
		for(i=0;i<N;i++)dist[i] = w[0][i];
		int path[N];//用以标识路径中上一顶点
		for(i=0;i<N;i++)path[i] = 1;

		//寻求最短路径
		int v1 = 0, path_length = 0;
		cout<<"到1的路径为1->1\n"<<endl;
		while(count != 0)
		{
			int min_i = 0, min = 10000;
			for(i=0;i<N;i++)
			{
				if(flag[i])continue;
				if(dist[i]<min)
				{
					min = dist[i];
					min_i = i;
				}
			}
			cout<<"到"<<min_i+1<<"的直接路径为"<<v1+1<<"->"<<min_i+1<<"\n"<<endl;
			path_length = min;
			flag[min_i] = true;
			count--;
			dist[min_i] = 0;
			path[min_i] = v1;
			v1 = min_i;
			

			//更新相应数组
			for(i=0;i<N;i++)
			{
				if(flag[i])continue;
				else
				{
					if(w[v1][i]>0 && w[v1][i]<10000)
					{
						dist[i] = path_length + w[v1][i];
						path[i] = v1;
					}
				}
			}
		}
	}
}


int _tmain(int argc, _TCHAR* argv[])
{
	int w[N][N] = {{0,10,2,10000,10000,10000,10000},
				   {10,0,10000,10000,1,10000,10000},
	               {2,10000,0,2,10000,11,10000},
	               {10000,10000,2,0,4,6,10000},
	               {10000,1,10000,4,0,10000,7},
	               {10000,10000,11,6,10000,0,3},
				   {10000,10000,10000,10000,7,3,0}};
	Dijkstra(w);
	return 0;
}