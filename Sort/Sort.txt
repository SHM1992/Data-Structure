// DataStructure.cpp : 实现数据结构中的各类排序算法
//
#include "stdafx.h"
#include <cstdlib>
#include <iostream>
using namespace std;

typedef int keytype;

keytype r1[]={0,10,20,30,40,50,60,70,80};
keytype r2[]={0,80,70,60,50,40,30,20,10};
keytype r3[]={0,11,22,33,44,20};

keytype r[]={0,49,38,65,97,76,13,27,49};

void insertsort(int n)  /*直接插入排序*/
{
   int i,j;
   for(i=2;i<=n;i++)	//从第二项起，拿出每项依次插入到前面的序列中，找寻它合适的位置（顺序排列）
    { r[0]=r[i]; r[i]=0;
      j=i-1;
      while( r[j]>r[0] )
        { r[j+1]=r[j]; r[j]=0;
          j--;
        }
      r[j+1]=r[0];
      r[0]=0;
    }
}


keytype r4[]={49,38,65,97,76,13,27,49,55,4};
keytype r5[]={49,0,65,0,13,0,37,0,50};
void shellsort(int n)	/*希尔排序*/
{
  int d=n/2;			//分组增量为n/2，即分成n/2个组
  keytype temp;
  int i,j,k;
  do{
      for(i=0;i<d;i++)
	{
           for(j=i+d;j<n;j=j+d)
            {  temp=r[j]; r[j]=0;
               k=j-d;
               while(k>=0 && r[k]>temp)
                  { r[k+d]=r[k]; r[k]=0;
                    k=k-d;
                  }
               r[k+d]=temp;
            }
	}
       d=d/2;
     }while(d>=1);
}

void shellsort2(int n)	/*希尔排序,组内用冒泡排序实现*/
{
  int d=n/2,flag=1;			//分组增量为n/2，即分成n/2个组
  keytype temp;
  int i,j;
  do{
      for(i=1;i<=d;i++)
	  {
		  flag=1;
          while(flag==1)
		  { flag=0;
			for(j=i;j+d<=n;j=j+d)	//每次把最大元素移到最后一个
			if(r[j+d]<r[j])
			{
				temp=r[j+d];
				r[j+d]=r[j];
				r[j]=temp;
				flag=1;			//只要有调动就标志为1
			}
		  }
	  }
	  d=d/2;
    }while(d>=1);
}

void bubblesort(int n) /*起泡排序*/
{ int i=n-1,j,flag=1;
  keytype temp;
  while(flag==1)
    { flag=0;
      for(j=0;j<i;j++)	//每次把最大元素移到最后一个
        if( r[j+1]<r[j] )
         { temp=r[j+1];
           r[j+1]=r[j];
           r[j]=temp;
	   flag=1;			//只要有调动就标志为1
          }
      i--;
    }
}

//keytype r1[]={11,22,33,44,55,66,77,88};
//keytype r2[]={88,77,66,55,44,33,22,11};
//keytype r3[]={38,49,65,97,13,27,76,49};
keytype r8[]={0,1,3,44,22,35,13,5,2};
int partition( int low, int high)	/*快速排序中划分两个部分*/
{  int i,j;
   keytype temp;
   i=low; j=high; temp=r8[low];r8[low]=0;//快速排序把第一个元素作为基准，并把其位置空出
   do {
        while( i<j && r8[j]>=temp )		//从最后一个开始找直至找到第一个比基准小的数，其下标为j
           j--;
        if( i<j )
           { r8[i]=r8[j]; i++; r8[j]=0;}	//移动后把位置空出
        while( i<j && r8[i]<=temp )		//从未调整的第一个（位置是第二个）元素开始，找第一个比基准大的数，其下标为i
           i++;
        if( i<j )
           { r8[j]=r8[i]; j--; r8[i]=0;}	//移动后把位置空出
      }while( i<j );					
   r8[i]=temp;							//把基准放入中间，此为一趟快速排序
   return i;			
}

void quicksort(int s1, int t1)	/*快速排序*/
{
    int i;
    if( s1<t1 )
       { i=partition(s1,t1);
         quicksort(s1,i-1);
         quicksort(i+1,t1);
       }
}

void selectsort(int n)		/*直接选择排序*/
{  int i,j,k;
   keytype temp;
   for(i=0;i<n-1;i++)
     {  k=i;
        for(j=i+1;j<n;j++)
           if( r[j]<r[k] )
               k=j;
        if( k!=i )
          { temp=r[i];
            r[i]=r[k];
            r[k]=temp;
          }
     }
}

keytype r[]={0,42,13,91,23,24,16,5,88};
//keytype r1[]={0,26,15,77,45,31,11,50,20};

void sift(int i, int m)/*堆的调整*/
{
  int j;
  keytype temp;
  temp=r[i];
  j=2*i;
  while( j<=m )
    { if( j<m && r[j]<r[j+1] )
         j++;
      if( r[j]>temp )
         { r[i]=r[j]; i=j; j=2*i; r[i]=0;}
      else break;
    }
   r[i]=temp;
}

void heapsort( int n)/*堆排序*/
{  int i;
   keytype temp;
   for(i=n/2;i>=1;i--)
      sift(i,n);
   for(i=n;i>=1;i--)
     { temp=r[1];
       r[1]=r[i];
       r[i]=temp;
       sift(1,i-1);
     }
}


int _tmain(int argc, _TCHAR* argv[])
{   //insertsort(8);
    //shellsort2(8);
    //quicksort(0,7);
    //selectsort(8);
    heapsort(8);
    return 0;
}