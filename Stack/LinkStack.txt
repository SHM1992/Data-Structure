// DataStructure.cpp : 实现数据结构中的常见算法XXX，本例针对顺序栈和链栈
//

#include "stdafx.h"

#include <stdlib.h>
#include <iostream>
#define MaxSize  50
using namespace std;

typedef int ElemType;
typedef struct
{
  int top;
  ElemType  data[MaxSize];
}SqStack;

typedef struct linknode
{
  ElemType  data;
  struct linknode  *next;
}LiStack;

//初始化顺序栈
void InitStack_sq(SqStack *&S)
{
  S=(SqStack *)malloc(sizeof(SqStack));
  S->top=-1;
}

//入顺序栈
bool Push_sq(SqStack *&S,ElemType e)
{
  if(S->top==MaxSize-1)
      return false;
  else 
  {     S->top++;
	    S->data[S->top]=e;
        return true;
  }
}

//出顺序栈
bool Pop_sq(SqStack *&S,ElemType &e)
{
   if(S->top==-1) 
	   return false;
   e=S->data[S->top];
   S->top--;
   return true;
}






//初始化链栈
void InitStack_L(LiStack *&S)
{
  S=(LiStack *)malloc(sizeof(LiStack));
  S->next=NULL;
}

//入链栈
void Push_L(LiStack *&S,ElemType e)
{  LiStack *p;
   p=(LiStack *)malloc(sizeof(LiStack));
   p->data=e;
   p->next=S->next ;
   S->next=p;
}

//出链栈
bool Pop_L(LiStack *&S,ElemType &e)
{
  if(S->next ==NULL) 
	  return false;
  LiStack *p;
  p=S->next ;
  e=p->data;
  S->next=p->next;
  free(p);
  return true;
}

//十进制转八进制
bool dec2oct(int m)
{
	SqStack *S1;
	InitStack_sq(S1);
	ElemType e;
	cout<<"10:"<<m<<endl;
	if(m==0){cout<<"8:0";return true;}
	while(m!=0)
	{
		Push_sq(S1,m%8);
		m=m/8;
	}
	cout<<"8:";
	while(Pop_sq(S1,e))
		cout<<e;
	return true;
}
int _tmain(int argc, _TCHAR* argv[])
{
	SqStack *S;
	ElemType e;
	bool b;
	InitStack_sq(S);

	int m=12345;
	b=dec2oct(m);

	LiStack *St;
	InitStack_L(St);
	Push_L(St,100); 
	Push_L(St,200);
	b=Pop_L(St,e);
	
}